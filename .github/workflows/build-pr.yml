on:
  pull_request:
    branches: [ master, main, develop ]
    types: [ opened, synchronize, ready_for_review, reopened, unlabeled ]

name: Build for Releaser

jobs:
  build:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.pull_request.labels.*.name, 'no-deploy') == false &&
      github.event.pull_request.draft == false &&
      (
        startsWith(github.event.pull_request.head.ref, 'feature/') == true ||
        startsWith(github.event.pull_request.head.ref, 'bugfix/') == true ||
        startsWith(github.event.pull_request.head.ref, 'hotfix/') == true
      )
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Get yarn cache directory path
#        id: yarn-cache-dir-path
#        run: echo "::set-output name=dir::$(yarn cache dir)"
#
#      - uses: actions/cache@v2
#        id: yarn-cache
#        with:
#          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
#          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-yarn-
#
#      - name: Setup NodeJS
#        uses: actions/setup-node@v1
#        with:
#          node-version: 10
#
#      - name: Install
#        run: |
#          npm i -g yarn
#          yarn install
#
#      - name: Get issue number
#        id: issue
#        uses: AsasInnab/regex-action@v1
#        with:
#          regex_pattern: '\bGW(S|K)?-[\d]+\b'
#          regex_flags: 'gi'
#          search_string: ${{ github.event.pull_request.title }}
#
#      - name: Set version
#        run: npm version "0.0.0-${{ steps.issue.outputs.first_match }}" --no-git-tag-version
#
#      - name: Build [prod]
#        run: yarn prod -- --output-path=dist/
#
#      - name: Zip files [prod]
#        run: |
#          cd dist/
#          zip -r release-prod.zip .
#
      - name: Move the file
        id: file
        run: |
          issue=GWS-123
          echo "Creating directory $issue"
          mkdir $issue
          sha=${{ github.event.pull_request.head.sha }}
          path="$issue/release-prod-$sha.zip"
          echo "Moving compiled file to $path"
          mv dist/release-prod.zip $path
          echo "::set-output name=path::$path"

      - name: Upload file to bucket
        uses: koraykoska/s3-upload-github-action@master
        env:
          FILE: ${{ steps.file.outputs.path }}
          S3_PREFIX: releaser
          S3_ENDPOINT: s3.us-east-1.amazonaws.com
          S3_BUCKET: gdoor-web-frontend-compiled
          S3_ACCESS_KEY_ID: ${{ secrets.S3_KEY_ID }}
          S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}

#      - name: Check failure
#        if: failure()
#        run: |
#          curl -X POST \
#            -H "Content-Type: application/json" \
#            --data-raw '{"pull_request":${{ toJson(github.event.pull_request) }} }' \
#            releaser.homolog.gdoorweb.com.br/frontendCompiled/error
